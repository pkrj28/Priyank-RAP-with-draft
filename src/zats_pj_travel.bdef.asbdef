managed;
//guideline and best practice for definition to be followed
strict ( 2 );
with draft;
//define the behavior for root entity
define behavior for ZATS_PJ_TRAVEL alias Travel
//make the behavior pool/implemetation for travel
implementation in class zbp_ats_pj_travel unique
//telling the framework to insert data in this db table for travel request
persistent table /dmo/travel_m
draft table ztest_dr_travel
//how the RAP should handle the locks - if a travel request is locked
//the other users cannot edit the childs - like its bookings and suppl
lock master
total etag LastChangedAt
//controls the permissions and security settings for our RAP BO
authorization master ( instance )
//controlling the concurrency
etag master LastChangedAt
early numbering
{
  //here are the operations which RAP with generate automatically (manage)
  create;
  update;
  delete;
   field ( readonly ) TravelId;
  //a booking can only be created with travel request
  association _Booking { create;with draft; }
  draft action Resume ;
  draft action Edit  ;
  draft action Activate optimized ;
  draft action Discard ;
  draft determine action  Prepare;

  mapping for /dmo/travel_m{
    TravelId = travel_id;
    AgencyId = agency_id;
    CustomerId = customer_id;
    BeginDate = begin_date;
    EndDate = end_date;
    TotalPrice = total_price;
    BookingFee = booking_fee;
    CurrencyCode = currency_code;
    Description = description;
    OverallStatus = overall_status;
    CreatedBy = created_by;
    LastChangedBy = last_changed_by;
    CreatedAt = created_at;
    LastChangedAt = last_changed_at;
  }
}

//define the behavior for child entity
define behavior for ZATS_PJ_BOOKING alias Booking
//make the behavior pool/implemetation for booking
implementation in class zbp_ats_pj_booking unique
//telling the framework to insert data in this db table for booking
persistent table /dmo/booking_m
draft table ztest_dr_booking
lock dependent by _Travel
authorization dependent by _Travel
etag master LastChangedAt
early numbering
{
  update;
  delete;
  field ( readonly ) TravelId, BookingId;
association _Travel { with draft; }
 association _BookingSupplement { create; with draft;}

  mapping for /dmo/booking_m{
    TravelId = travel_id;
    BookingId = booking_id;
    BookingDate = booking_date;
    CustomerId = customer_id;
    CarrierId = carrier_id;
    ConnectionId = connection_id;
    FlightDate = flight_date;
    FlightPrice = flight_price;
    CurrencyCode = currency_code;
    BookingStatus = booking_status;
    LastChangedAt = last_changed_at;
  }
}

//define the behavior for child entity
define behavior for ZATS_PJ_BOOKSUPPL alias BookSuppl
//make the behavior pool/implemetation for travel
implementation in class zbp_ats_pj_boosuppl unique
//telling the framework to insert data in this db table for booking suppl
persistent table /dmo/booksuppl_m

lock dependent by _Travel
authorization dependent by _Travel

etag master LastChangedAt
draft table ztest_dr_suppl
early numbering
{
  update;
  delete;
  field ( readonly ) BookingId, TravelId,BookingSupplementId;
  association _Travel;
  association _Booking;

  mapping for /dmo/booksuppl_m{
    TravelId = travel_id;
    BookingId = booking_id;
    BookingSupplementId = booking_supplement_id;
    SupplementId = supplement_id;
    Price = price;
    CurrencyCode = currency_code;
    LastChangedAt = last_changed_at;
  }
}